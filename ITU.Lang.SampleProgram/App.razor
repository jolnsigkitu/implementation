@using System.Threading
@inject IJSRuntime JSRuntime

<div class="flex flex-col items-center justify-center w-full h-full pt-12">
    <div class="text-center">
        <div class="text-6xl">@wpm wpm</div>
        <div class="flex items-baseline justify-center">
            <div>@elapsedTime</div>
            <div>&middot;</div>
            <div>@accuracy %</div>
        </div>
    </div>
    <div class="flex justify-center items-center w-full p-2 m-4 bg-gray-100 focus-within:bg-gray-200"
        @onclick="FocusTextInput">
        <input type="text" @ref="textInput" autofocus class="text-2xl bg-transparent focus:outline-none"
            @oninput="OnInputChanged" value="@Input" />
    </div>
    <div id="targetContainer" class="w-full h-60 max-w-2xl text-xl overflow-y-auto">
        @foreach (var word in words.Previous)
        {
            <WordResult Word="@word" />
        }

        <WordResult Word="@words.Current" IsCurrent />

        @foreach (var word in words.Future)
        {
            <WordResult Word="@word" />
        }
    </div>
</div>

@code {
    private ElementReference textInput { get; set; }

    private Words words = new Words();
    /*
    TODO: Introduce our programming language
    private Statistics stats = new Statistics();
    */
    private string wpm = "0";
    private string elapsedTime = "00:00:00";
    private string accuracy = "0";
    private bool hasStarted = false;

    public string Input { get; set; }

    private Timer timer;

    private async Task OnInputChanged(ChangeEventArgs evt)
    {
        if (!hasStarted)
        {
            hasStarted = true;
            StartStatsTimer();
        }

        Input = evt.Value.ToString();

        words.Current.ComputeSegments(Input);

        if (Input.EndsWith(" "))
        {
            words.NextWord();
            // TODO: Add word to signal to get stats
            Input = "";

            await JSRuntime.InvokeVoidAsync("BlazorScrollChildIntoView", "#targetContainer", ".current");
        }
    }

    private void StartStatsTimer()
    {
        var start = DateTime.Now;
        timer = new Timer(async (o) =>
        {
            var now = DateTime.Now;
            var diff = now - start;
            elapsedTime = diff.Duration().ToString(@"hh\:mm\:ss");

            // Manually call StateHasChanged, since the user did not perform these state updates
            StateHasChanged();
        }, null, 500, 500);
    }

    public async Task FocusTextInput() => await textInput.FocusAsync();
}
