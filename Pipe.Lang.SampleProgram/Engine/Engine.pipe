using System.Collections.Generic;
using Pipe.Lang.SampleProgram.Lib;
using Pipe.Lang.SampleProgram.Util;
using Microsoft.AspNetCore.Components.Web;

extern type StringWithLength = {
    Length: int;
};

extern type Segment = {
    Text: StringWithLength;
    Incorrect: boolean;
    Attempted: boolean;
};

extern type TimeSpan = {
    ToString: (string) => string;
    TotalSeconds: double;
    Duration: () => TimeSpan;
};

extern type DateTime = {
    ToString: (string) => string;
    Subtract: (DateTime) => TimeSpan;
    Now: DateTime;
};

extern const DateTime = new DateTime();

extern type IEnumerator = <T> {
    Current: T;
    MoveNext() => true;
};

extern type IEnumerable = <T> {
    GetEnumerator() => new IEnumerator<T>();
};

extern type CompletedWord = {
    CompletedAt: DateTime;
    Segments: IEnumerable<Segment>;
};

extern type Numbers = {
    ToDouble: (int) => double;
    Round: (double) => int;
};
extern const Numbers = new Numbers();

type AccuracyMetrics = {
    Total = 0;
    Correct = 0;
};

type Engine = {
    Wpm = 0;
    Accuracy = 0d;
    ElapsedTime = "00:00:00";

    StartTime: DateTime;

    WordSignal: PushSignalSource<CompletedWord>;
    StatsSignal: PushSignalSource<AccuracyMetrics>;
    TimerSignal: PushSignalSource<TimeSpan>;

    constructor(wordSignal: PushSignalSource<CompletedWord>)
    {
        WordSignal = wordSignal;
    }

    makeStatsSignal()
    {
        return WordSignal
            .Reduce((metrics: AccuracyMetrics, word: CompletedWord) {
                let enumerator = word.Segments.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    let segment = enumerator.Current;
                    let segLen = segment.Text.Length;
                    metrics.Total = metrics.Total + segLen;
                    if (!segment.Incorrect) {
                        metrics.Correct = metrics.Correct + segLen;
                    }
                }

                return metrics;
            }, new AccuracyMetrics());
    }

    makeWpmSignal(): PushSignalSource<int>
    {
        return StatsSignal
        .ZipRepeat(TimerSignal)
        .Map((pair: Pair<AccuracyMetrics, TimeSpan>)
        {
            let stats = pair.First;

            let elapsedTime = (DateTime.Now.Subtract(StartTime)).TotalSeconds;
            // https://github.com/Miodec/monkeytype/blob/94d2c7ead9b488230bba7b07181e3a3dfcffd2d2/src/js/test/test-logic.js#L834
            return Numbers.Round((stats.Correct * (60d / elapsedTime)) / 5d);
        });
    }

    makeAccuracySignal() => StatsSignal.Map((stats: AccuracyMetrics) {
        return (Numbers.ToDouble(stats.Correct) / Numbers.ToDouble(stats.Total)) * 100d;
    });

    makeTimerSignal() => Signal.Timer(500)
        .Map((i: int) => DateTime.Now.Subtract(StartTime).Duration());


    Start(start: DateTime, onUpdate: () => void)
    {
        StartTime = start;

        StatsSignal = makeStatsSignal();
        TimerSignal = makeTimerSignal();

        TimerSignal.ForEach((elapsedTime: TimeSpan) {
            ElapsedTime = elapsedTime.ToString("hh\\:mm\\:ss");
            onUpdate();
        });

        makeWpmSignal()
            .ForEach((wpm: int) { Wpm = wpm; });

        makeAccuracySignal()
            .ForEach((accuracy: double) { Accuracy = accuracy; });
    }
};
