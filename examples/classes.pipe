type Account = {
    id: int;
};

type User = {
    // this: User; // Is 'hidden'
    // Fields
    firstName: string;
    lastName: string;
    age: int;

    // Fields with initial default value
    role = 1;

    account: Account;

    // Constructor
    constructor(_firstName: string, lastName: string) {
        firstName = _firstName;
        this.lastName = lastName;
    }

    // Methods
    fullName() => firstName + lastName;
    fullName2 = () => firstName + lastName;

    fullName3 = () {
        return firstName + this.lastName;
    };
};

type Nope = {};

type Recursive = {
    next = new Recursive();
};

new Recursive().next.next;

// Instantiation of userland classes
const john = new User("John", "Doe");
println(john.fullName());
println(john.account.id);

john.age = 42;
//john.age = true;
println(john.age);

println(new User("Jane", "Doe").role);

const nope = new Nope();

let factory = (firstName: string, lastName: string): User {
    return new User(firstName, lastName);
};

println(factory("Pickle", "Rick").firstName);
println(factory("Pickle", "Rick").fullName());

// assign grammar only supports nestedname for now
// factory("Pickle", "Rick").lastName = "John";

/*
// Enhancement: Prohibit shadowing of 'this'
type Mal = {
    num: int;
    setNum(this: int) {
        this.num = this;
    }
};

new Mal(9);
*/
